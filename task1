import cv2
import matplotlib.pyplot as plt

#1.读取图片
image = cv2.imread('1.jpg')
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

#2.构建高斯金字塔
def gaussian(ori_image, down_times=5):
    # 1：添加第一个图像为原始图像
    temp_gau = ori_image.copy()
    gaussian_pyramid = [temp_gau]
    for i in range(down_times):
        # 2：连续存储5次下采样，这样高斯金字塔就有6层
        temp_gau = cv2.pyrDown(temp_gau)
        gaussian_pyramid.append(temp_gau)
    return gaussian_pyramid

result = gaussian(image)

fig, axes = plt.subplots(nrows = 1, ncols = 6, figsize=(10, 8), dpi=100)
axes[0].imshow(result[0], cmap=plt.cm.gray)
axes[0].set_title("origin")
axes[1].imshow(result[1],cmap='gray')
axes[1].set_title("pyrDown_1")
axes[2].imshow(result[2], cmap=plt.cm.gray)
axes[2].set_title("pyrDown_2")
axes[3].imshow(result[3], cmap=plt.cm.gray)
axes[3].set_title("pyrDown_3")
axes[4].imshow(result[4], cmap=plt.cm.gray)
axes[4].set_title("pyrDown_4")
axes[5].imshow(result[5], cmap=plt.cm.gray)
axes[5].set_title("pyrDown_5")
plt.show()

#3.添加高斯噪声
import skimage
gaussian_noisy = skimage.util.random_noise(image, mode='gaussian', var=0.01)

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 8), dpi=100)
axes[0].imshow(image, cmap=plt.cm.gray)
axes[0].set_title("origin")
axes[1].imshow(gaussian_noisy,cmap='gray')
axes[1].set_title("gaussian_noisy")
plt.show()

#4.添加椒盐噪声
import skimage
salt_pepper_noisy = skimage.util.random_noise(image, mode='s&p')

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 8), dpi=100)
axes[0].imshow(image, cmap=plt.cm.gray)
axes[0].set_title("origin")
axes[1].imshow(salt_pepper_noisy,cmap='gray')
axes[1].set_title("salt_pepper_noisy")
plt.show()

#5.高斯平滑

gaussian_noisy_GaussianBlur=cv2.GaussianBlur(gaussian_noisy,(3,3),1.3)

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 8), dpi=100)
axes[0].imshow(gaussian_noisy, cmap=plt.cm.gray)
axes[0].set_title("gaussian_noisy")
axes[1].imshow(gaussian_noisy_GaussianBlur,cmap='gray')
axes[1].set_title("gaussian_noisy_GaussianBlur")
plt.show()

salt_pepper_noisy_GaussianBlur=cv2.GaussianBlur(salt_pepper_noisy,(3,3),1.3)

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 8), dpi=100)
axes[0].imshow(salt_pepper_noisy, cmap=plt.cm.gray)
axes[0].set_title("salt_pepper_noisy")
axes[1].imshow(salt_pepper_noisy_GaussianBlur,cmap='gray')
axes[1].set_title("salt_pepper_noisy_GaussianBlur")
plt.show()

#5.中值滤波
import numpy as np
gaussian_noisy_mean=cv2.blur(image, (5,5))

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 8), dpi=100)
axes[0].imshow(gaussian_noisy, cmap=plt.cm.gray)
axes[0].set_title("gaussian_noisy")
axes[1].imshow(gaussian_noisy_mean,cmap='gray')
axes[1].set_title("gaussian_noisy_mean")
plt.show()

salt_pepper_noisy_mean=cv2.blur(salt_pepper_noisy, (5,5))

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 8), dpi=100)
axes[0].imshow(salt_pepper_noisy, cmap=plt.cm.gray)
axes[0].set_title("salt_pepper_noisy")
axes[1].imshow(salt_pepper_noisy_mean,cmap='gray')
axes[1].set_title("salt_pepper_noisy_mean")
plt.show()

#6.计算RMSE
from skimage.metrics import mean_squared_error as compare_mse
from math import sqrt

gaussian_noisy_RMSE = round(sqrt(compare_mse(image, gaussian_noisy)),5)
salt_pepper_noisy_RMSE = round(sqrt(compare_mse(image, salt_pepper_noisy)),5)
gaussian_noisy_GaussianBlur_RMSE = round(sqrt(compare_mse(image, gaussian_noisy_GaussianBlur)),5)
salt_pepper_noisy_GaussianBlur_RMSE = round(sqrt(compare_mse(image, salt_pepper_noisy_GaussianBlur)),5)
gaussian_noisy_mean_RMSE = round(sqrt(compare_mse(image, gaussian_noisy_mean)),5)
salt_pepper_noisy_mean_RMSE = round(sqrt(compare_mse(image, salt_pepper_noisy_mean)),5)

fig, ax = plt.subplots(figsize=(10,8))
RMSE_titile = ['GNR','SPNR','GNGR','SPNGR','GNMR','SPNMR']
RMSE_data = [gaussian_noisy_RMSE,salt_pepper_noisy_RMSE,gaussian_noisy_GaussianBlur_RMSE,salt_pepper_noisy_GaussianBlur_RMSE,gaussian_noisy_mean_RMSE,salt_pepper_noisy_mean_RMSE]
colors = ['yellow','cyan','#1f77b4', '#ff7f0e', '#2ca02c', 'r']
bar1 = plt.bar(np.arange(0,30,5),RMSE_data,align='center',color=colors,tick_label=RMSE_titile)
for b in bar1: #遍历每个柱子
  height = b.get_height()
  ax.annotate('{}'.format(height),xy=(b.get_x() + b.get_width() / 2, height), xytext=(0,3),textcoords="offset points", va = 'bottom', ha = 'center')
plt.show()
